Utilisation de g++ plutôt que c++ comme compilateur par défaut
Modification de l'option -std pour utiliser C++17 au lieu de C++98 (cette option peut être ajustée selon les besoins de votre projet)
Ajout d'une règle pour la génération des fichiers de dépendances (%.d: %.cpp)
Modification de la règle de compilation des fichiers sources pour inclure les fichiers de dépendances (%.o: %.cpp %.d)
Ajout de la commande RM pour supprimer les fichiers objets et de dépendances dans les cibles clean et fclean
Utilisation de $(RM) au lieu de rm pour assurer une compatibilité avec différents systèmes d'exploitation

CXXFLAGS = -Wall -Wextra -Werror -std=c++98 -ansi -pedantic
#https://stackoverflow.com/questions/2855121/what-is-the-purpose-of-using-pedantic-in-the-gcc-g-compiler

#To redirect stderr to stdout:
#2>&1

#@make 
#The @ symbol before a command tells make to not print the command before executing it.
# This is useful for commands that print a lot of output, such as compiling a large project.
# /dev/null is a special file that discards all data written to it.

-MM, -MT et -MF sont des options du compilateur GCC utilisées pour générer des fichiers de dépendances.

-MM est utilisé pour générer une liste de dépendances en fonction des fichiers d'entrée spécifiés. Cette option génère une liste de dépendances au format Makefile pour chaque fichier d'entrée spécifié.

-Utiliser le flag -MMD à la place de -MM dans la règle pour la génération des fichiers de dépendances. Cette option permet de générer des fichiers de dépendances sans inclure les fichiers système, ce qui les rend plus précis et réduit le risque d'erreurs.

-MT est utilisé pour spécifier une cible de sortie pour les règles de dépendance générées. L'argument de cette option est la cible qui doit être générée.

-MF est utilisé pour spécifier le nom du fichier de sortie pour les règles de dépendance générées.
Ajouter l'option -MF au compilateur pour générer les fichiers de dépendances dans le répertoire de dépendances plutôt que dans le répertoire source 

L'affectation simple avec le signe "=" qui définit une variable dont la valeur sera remplacée par le texte défini à chaque occurrence.

L'affectation avec le signe ":=" qui définit une variable dont la valeur est évaluée une seule fois, lors de la définition de la variable, et non pas chaque fois qu'elle est utilisée.

Lorsque vous utilisez ces options ensemble, le compilateur GCC génère un fichier de dépendance qui est inclus dans le Makefile. Le fichier de dépendance contient une liste de tous les fichiers d'entête dont dépend le fichier source, et si l'un de ces fichiers est modifié, le fichier source sera recompilé.

En utilisant la directive -include avec le nom des fichiers de dépendances, le Makefile inclura automatiquement les dépendances générées dans le processus de compilation et de recompilation.

# @make -C $(LIBFT_DIR) clean > /dev/null 2>&1
Pour nos librairies

Dans le code que vous avez fourni, $(1) est un argument passé à la fonction définie par la directive define. La fonction utilise cette variable pour afficher les messages de construction et de nettoyage avec les commandes appropriées.

Lorsqu'une fonction est appelée avec un argument, ce dernier est assigné à la variable $(1) à l'intérieur de la fonction. Dans le Makefile que vous avez fourni, cette variable est utilisée pour spécifier la commande à exécuter dans les fonctions build_msg et remove_msg en fonction de l'argument donné.

Dans un projet C/C++, il y a souvent beaucoup de fichiers source (.c ou .cpp) qui sont interdépendants. Cela signifie que si vous modifiez un fichier source, il peut affecter les autres fichiers source qui en dépendent. Le compilateur doit donc savoir quelles sont les dépendances entre les fichiers source afin de reconstruire les fichiers objets mis à jour et de recompiler les parties du projet qui en ont besoin.

Le Makefile utilise la commande de compilation pour générer des fichiers de dépendances .d pour chaque fichier source, en utilisant l'option -MM du compilateur. Ces fichiers de dépendances contiennent une liste de tous les fichiers d'en-tête inclus dans le fichier source, ainsi que les dépendances des fichiers d'en-tête eux-mêmes.

Lorsque vous incluez les fichiers de dépendances à la fin du Makefile en utilisant l'option -include, cela signifie que si les fichiers de dépendances sont modifiés, le Makefile les inclura et recompiler les fichiers objets pertinents. Cela garantit que le projet est toujours à jour et compilé correctement, même si les dépendances changent.

-include indique simplement à Make d'inclure ces fichiers de dépendances, même s'ils n'existent pas encore.

SHELL := /bin/bash -o pipefail
le -o pipefail specifie directement l endroit ou il y a une erreur et ne continue pas

@$(1) 
c est tout simplement le 1er arg d une fct dans un makefile
